<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CHC Staking Platform</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
        }

        .staking-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        header {
            text-align: center;
            margin-bottom: 20px;
        }

        header h1 {
            font-size: 2em;
            color: #4caf50;
        }

        .wallet-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
        }

        .wallet-info button {
            background-color: #4caf50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .staking-actions {
            margin-bottom: 30px;
        }

        .staking-actions input {
            padding: 10px;
            margin: 10px 0;
            width: 100%;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .staking-actions button {
            background-color: #4caf50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .daily-token {
            text-align: center;
        }

        .daily-token button {
            background-color: #ff9800;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .daily-token p {
            margin-top: 10px;
            color: #555;
        }

        .error-message {
            color: red;
            font-size: 14px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="staking-container">
        <header>
            <h1>CHC Staking</h1>
            <p>Επιλέξτε τη λειτουργία σας: Staking ή Παραλαβή Token</p>
        </header>

        <div class="wallet-info">
            <p>Υπόλοιπο CHC στο MetaMask: <span id="balance">0 CHC</span></p>
            <button id="connect-wallet">Σύνδεση με MetaMask</button>
        </div>

        <div class="staking-actions">
            <h2>Διαχείριση Staking</h2>
            <label for="staking-amount">Εισάγετε ποσότητα για Staking:</label>
            <input type="number" id="staking-amount" placeholder="Ποσότητα CHC" />
            <button id="stake-btn">Stake</button>

            <p>Ετήσιο ποσοστό απόδοσης (APY): 10%</p>
            <p>Εκτιμώμενα κέρδη: <span id="estimated-earnings">0 CHC</span></p>
        </div>

        <div class="daily-token">
            <button id="claim-token">Παραλάβετε το Token σας</button>
            <p>Μπορείτε να παραλάβετε 1 token καθημερινά.</p>
            <p class="error-message" id="claim-error"></p>
        </div>

        <div class="error-message" id="connect-error"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/ethers@5.6.9/dist/ethers.umd.min.js"></script>
    <script>
        const provider = new ethers.BrowserProvider(window.ethereum);
        let signer;
        let userAddress;
        let lastClaimTime = 0;
        const tokenAddress = '0x3e634887906f9b837C376a8b682cBc2F1C5a61EB';  // Διεύθυνση συμβολαίου CHC
        const tokenABI = [{"inputs":[{"internalType":"address","name":"_chcToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"annualPercentageYield","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"calculateReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chcToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRewardAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakedAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lockPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"stakeTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenDecimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}];
const tokenContractAddress = '0xb78b9aDC14F1069c61b27616268C0aE686961000';
tokenContract = new ethers.Contract(tokenContractAddress, tokenABI, signer);
        let tokenContract;

        document.getElementById('connect-wallet').onclick = async () => {
            if (window.ethereum) {
                try {
                    await window.ethereum.request({ method: 'eth_requestAccounts' });
                    signer = await provider.getSigner();
                    userAddress = await signer.getAddress();
                    tokenContract = new ethers.Contract(tokenAddress, tokenABI, signer);
                    document.getElementById('connect-error').textContent = '';
                    updateBalance();
                } catch (error) {
                    document.getElementById('connect-error').textContent = 'Πρόβλημα σύνδεσης με MetaMask. Προσπαθήστε ξανά.';
                }
            } else {
                document.getElementById('connect-error').textContent = 'Πρέπει να έχετε το MetaMask εγκατεστημένο.';
            }
        };

        const updateBalance = async () => {
            const balance = await tokenContract.balanceOf(userAddress);
            document.getElementById('balance').textContent = ethers.utils.formatUnits(balance, 18) + ' CHC';
        };

        document.getElementById('stake-btn').onclick = async () => {
            const amount = document.getElementById('staking-amount').value;
            if (amount && amount > 0) {
                const tx = await tokenContract.deposit(ethers.utils.parseUnits(amount, 18));
                await tx.wait();
                alert('Stake πετυχημένο!');
                updateBalance();
            }
        };

        document.getElementById('claim-token').onclick = async () => {
            const currentTime = Math.floor(Date.now() / 1000);
            const claimCooldown = 24 * 60 * 60; // 24 ώρες σε δευτερόλεπτα

            if (currentTime - lastClaimTime >= claimCooldown) {
                lastClaimTime = currentTime;
                // Δημιουργία συναλλαγής για την παραλαβή του token
                const tx = await tokenContract.transfer(userAddress, ethers.utils.parseUnits('1', 18));
                await tx.wait();
                alert('Παραλάβατε 1 CHC token!');
                updateBalance();
            } else {
                document.getElementById('claim-error').textContent = 'Πρέπει να περιμένετε 24 ώρες για την επόμενη παραλαβή.';
            }
        };
    </script>
</body>
</html>
