<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CHC Staking Platform</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>CHC Staking Platform</h1>
    <button onclick="connectWallet()">Connect Wallet</button>
    <div id="stakeInterface" style="display:none;">
        <input type="number" id="stakeAmount" placeholder="Amount to stake" step="any">
        <button onclick="stake()">Stake</button>
        <button onclick="unstake()">Unstake</button>
        <button onclick="claimRewards()">Claim Rewards</button>
        <p id="stakedBalance">Staked Balance: 0 CHC</p>
        <p id="rewards">Pending Rewards: 0 CHC</p>
<p id="rewards">Rewards: 0 CHC</p>
    </div>
    <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"></script>
    <script src="script.js"></script>
</body>
</html>
const tokenAddress = '0x3e634887906f9b837C376a8b682cBc2F1C5a61EB';  // Διεύθυνση συμβολαίου CHC
const tokenContractAddress = '0xb78b9aDC14F1069c61b27616268C0aE686961000';
const tokenABI = [{"inputs":[{"internalType":"address","name":"_chcToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"annualPercentageYield","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"calculateReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chcToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRewardAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakedAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lockPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"stakeTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenDecimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}];

let tokenContract;
let provider;
let signer;

async function connectWallet() {
    provider = new ethers.providers.Web3Provider(window.ethereum);
    await provider.send("eth_requestAccounts", []);
    signer = provider.getSigner();
    tokenContract = new ethers.Contract(tokenContractAddress, tokenABI, signer);
    document.getElementById('stakeInterface').style.display = 'block';
    updateStakedBalance();
    updateRewards();
}

async function stake() {
    const amount = document.getElementById('stakeAmount').value;
    const amountInWei = ethers.utils.parseEther(amount);
    await tokenContract.deposit(amountInWei);
    await updateStakedBalance();
    await updateRewards();
}

async function unstake() {
    const amount = document.getElementById('stakeAmount').value;
    const amountInWei = ethers.utils.parseEther(amount);
    await tokenContract.withdraw(amountInWei);
    await updateStakedBalance();
    await updateRewards();
}

async function claimRewards() {
    const rewardAmount = await tokenContract.calculateReward(await signer.getAddress());
    await tokenContract.withdraw(rewardAmount);
    await updateRewards();
}

async function updateStakedBalance() {
    const balance = await tokenContract.balances(await signer.getAddress());
    document.getElementById('stakedBalance').innerText = `Staked Balance: ${ethers.utils.formatEther(balance)} CHC`;
}

async function updateRewards() {
    const rewards = await tokenContract.calculateReward(await signer.getAddress());
    document.getElementById('rewards').innerText = `Pending Rewards: ${ethers.utils.formatEther(rewards)} CHC`;
}
body {
    font-family: Arial, sans-serif;
    text-align: center;
    background-color: #f4f4f4;
    padding: 20px;
}

button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

input[type="number"] {
    padding: 8px;
    margin: 8px 0;
    width: 80%;
    box-sizing: border-box;
}

@media (max-width: 600px) {
    button, input[type="number"] {
        width: 100%;
    }
}
